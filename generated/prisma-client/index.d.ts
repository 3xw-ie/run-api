// Code generated by Prisma (prisma@1.20.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  contact: (where?: ContactWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  contact: (where: ContactWhereUniqueInput) => ContactPromise;
  contacts: (
    args?: {
      where?: ContactWhereInput;
      orderBy?: ContactOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Contact>;
  contactsConnection: (
    args?: {
      where?: ContactWhereInput;
      orderBy?: ContactOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ContactConnectionPromise;
  node: (args: { id: ID_Output }) => NodePromise;

  /**
   * Mutations
   */

  createContact: (data: ContactCreateInput) => ContactPromise;
  updateContact: (
    args: { data: ContactUpdateInput; where: ContactWhereUniqueInput }
  ) => ContactPromise;
  updateManyContacts: (
    args: { data: ContactUpdateInput; where?: ContactWhereInput }
  ) => BatchPayloadPromise;
  upsertContact: (
    args: {
      where: ContactWhereUniqueInput;
      create: ContactCreateInput;
      update: ContactUpdateInput;
    }
  ) => ContactPromise;
  deleteContact: (where: ContactWhereUniqueInput) => ContactPromise;
  deleteManyContacts: (where?: ContactWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  contact: (
    where?: ContactSubscriptionWhereInput
  ) => ContactSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ContactOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "shortname_ASC"
  | "shortname_DESC"
  | "type_ASC"
  | "type_DESC"
  | "category_ASC"
  | "category_DESC"
  | "hubspot_id_ASC"
  | "hubspot_id_DESC"
  | "intercom_id_ASC"
  | "intercom_id_DESC"
  | "stripe_id_ASC"
  | "stripe_id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ContactType = "Lead" | "User";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ContactCreateInput {
  email?: String;
  name?: String;
  shortname?: String;
  type?: ContactType;
  category?: String;
  hubspot_id?: String;
  intercom_id?: String;
  stripe_id?: String;
}

export interface ContactUpdateInput {
  email?: String;
  name?: String;
  shortname?: String;
  type?: ContactType;
  category?: String;
  hubspot_id?: String;
  intercom_id?: String;
  stripe_id?: String;
}

export interface ContactWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  shortname?: String;
  shortname_not?: String;
  shortname_in?: String[] | String;
  shortname_not_in?: String[] | String;
  shortname_lt?: String;
  shortname_lte?: String;
  shortname_gt?: String;
  shortname_gte?: String;
  shortname_contains?: String;
  shortname_not_contains?: String;
  shortname_starts_with?: String;
  shortname_not_starts_with?: String;
  shortname_ends_with?: String;
  shortname_not_ends_with?: String;
  type?: ContactType;
  type_not?: ContactType;
  type_in?: ContactType[] | ContactType;
  type_not_in?: ContactType[] | ContactType;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  hubspot_id?: String;
  hubspot_id_not?: String;
  hubspot_id_in?: String[] | String;
  hubspot_id_not_in?: String[] | String;
  hubspot_id_lt?: String;
  hubspot_id_lte?: String;
  hubspot_id_gt?: String;
  hubspot_id_gte?: String;
  hubspot_id_contains?: String;
  hubspot_id_not_contains?: String;
  hubspot_id_starts_with?: String;
  hubspot_id_not_starts_with?: String;
  hubspot_id_ends_with?: String;
  hubspot_id_not_ends_with?: String;
  intercom_id?: String;
  intercom_id_not?: String;
  intercom_id_in?: String[] | String;
  intercom_id_not_in?: String[] | String;
  intercom_id_lt?: String;
  intercom_id_lte?: String;
  intercom_id_gt?: String;
  intercom_id_gte?: String;
  intercom_id_contains?: String;
  intercom_id_not_contains?: String;
  intercom_id_starts_with?: String;
  intercom_id_not_starts_with?: String;
  intercom_id_ends_with?: String;
  intercom_id_not_ends_with?: String;
  stripe_id?: String;
  stripe_id_not?: String;
  stripe_id_in?: String[] | String;
  stripe_id_not_in?: String[] | String;
  stripe_id_lt?: String;
  stripe_id_lte?: String;
  stripe_id_gt?: String;
  stripe_id_gte?: String;
  stripe_id_contains?: String;
  stripe_id_not_contains?: String;
  stripe_id_starts_with?: String;
  stripe_id_not_starts_with?: String;
  stripe_id_ends_with?: String;
  stripe_id_not_ends_with?: String;
  AND?: ContactWhereInput[] | ContactWhereInput;
  OR?: ContactWhereInput[] | ContactWhereInput;
  NOT?: ContactWhereInput[] | ContactWhereInput;
}

export interface ContactSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ContactWhereInput;
  AND?: ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput;
  OR?: ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput;
  NOT?: ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput;
}

export type ContactWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface ContactEdge {
  cursor: String;
}

export interface ContactEdgePromise extends Promise<ContactEdge>, Fragmentable {
  node: <T = Contact>() => T;
  cursor: () => Promise<String>;
}

export interface ContactEdgeSubscription
  extends Promise<AsyncIterator<ContactEdge>>,
    Fragmentable {
  node: <T = ContactSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ContactPreviousValues {
  id: ID_Output;
  email?: String;
  name?: String;
  shortname?: String;
  type?: ContactType;
  category?: String;
  hubspot_id?: String;
  intercom_id?: String;
  stripe_id?: String;
}

export interface ContactPreviousValuesPromise
  extends Promise<ContactPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  shortname: () => Promise<String>;
  type: () => Promise<ContactType>;
  category: () => Promise<String>;
  hubspot_id: () => Promise<String>;
  intercom_id: () => Promise<String>;
  stripe_id: () => Promise<String>;
}

export interface ContactPreviousValuesSubscription
  extends Promise<AsyncIterator<ContactPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  shortname: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ContactType>>;
  category: () => Promise<AsyncIterator<String>>;
  hubspot_id: () => Promise<AsyncIterator<String>>;
  intercom_id: () => Promise<AsyncIterator<String>>;
  stripe_id: () => Promise<AsyncIterator<String>>;
}

export interface ContactSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ContactSubscriptionPayloadPromise
  extends Promise<ContactSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Contact>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContactPreviousValues>() => T;
}

export interface ContactSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContactSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContactSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContactPreviousValuesSubscription>() => T;
}

export interface Contact {
  id: ID_Output;
  email?: String;
  name?: String;
  shortname?: String;
  type?: ContactType;
  category?: String;
  hubspot_id?: String;
  intercom_id?: String;
  stripe_id?: String;
}

export interface ContactPromise extends Promise<Contact>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  shortname: () => Promise<String>;
  type: () => Promise<ContactType>;
  category: () => Promise<String>;
  hubspot_id: () => Promise<String>;
  intercom_id: () => Promise<String>;
  stripe_id: () => Promise<String>;
}

export interface ContactSubscription
  extends Promise<AsyncIterator<Contact>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  shortname: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<ContactType>>;
  category: () => Promise<AsyncIterator<String>>;
  hubspot_id: () => Promise<AsyncIterator<String>>;
  intercom_id: () => Promise<AsyncIterator<String>>;
  stripe_id: () => Promise<AsyncIterator<String>>;
}

export interface ContactConnection {}

export interface ContactConnectionPromise
  extends Promise<ContactConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ContactEdge>>() => T;
  aggregate: <T = AggregateContact>() => T;
}

export interface ContactConnectionSubscription
  extends Promise<AsyncIterator<ContactConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContactEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContactSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateContact {
  count: Int;
}

export interface AggregateContactPromise
  extends Promise<AggregateContact>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContactSubscription
  extends Promise<AsyncIterator<AggregateContact>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Type Defs
 */

export const prisma: Prisma;
